// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using AppConfiguration.Models;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace AppConfiguration
{
    internal partial class ServiceRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of ServiceRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public ServiceRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            endpoint ??= new Uri("");

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateAddPetRequest(Pet body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/pet", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Add a new pet to the store. </summary>
        /// <param name="body"> Pet object that needs to be added to the store. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response> AddPetAsync(Pet body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateAddPetRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 405:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Add a new pet to the store. </summary>
        /// <param name="body"> Pet object that needs to be added to the store. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response AddPet(Pet body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateAddPetRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 405:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdatePetRequest(Pet body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/pet", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update an existing pet. </summary>
        /// <param name="body"> Pet object that needs to be added to the store. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response> UpdatePetAsync(Pet body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdatePetRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 400:
                case 404:
                case 405:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update an existing pet. </summary>
        /// <param name="body"> Pet object that needs to be added to the store. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response UpdatePet(Pet body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdatePetRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 400:
                case 404:
                case 405:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateFindPetsByStatusRequest(IEnumerable<Get0ItemsItem> status)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/pet/findByStatus", false);
            uri.AppendQueryDelimited("status", status, ",", true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Multiple status values can be provided with comma separated strings. </summary>
        /// <param name="status"> Status values that need to be considered for filter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="status"/> is null. </exception>
        public async Task<Response<object>> FindPetsByStatusAsync(IEnumerable<Get0ItemsItem> status, CancellationToken cancellationToken = default)
        {
            if (status == null)
            {
                throw new ArgumentNullException(nameof(status));
            }

            using var message = CreateFindPetsByStatusRequest(status);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Pet> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<Pet> array = new List<Pet>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Pet.DeserializePet(item));
                        }
                        value = array;
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 200:
                    {
                        IReadOnlyList<Pet> value = default;
                        var document = XDocument.Load(message.Response.ContentStream, LoadOptions.PreserveWhitespace);
                        if (document.Element("ArrayOfPet") is XElement arrayOfPetElement)
                        {
                            var array = new List<Pet>();
                            foreach (var e in arrayOfPetElement.Elements("Pet"))
                            {
                                array.Add(Pet.DeserializePet(e));
                            }
                            value = array;
                        }
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    return Response.FromValue<object>(null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Multiple status values can be provided with comma separated strings. </summary>
        /// <param name="status"> Status values that need to be considered for filter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="status"/> is null. </exception>
        public Response<object> FindPetsByStatus(IEnumerable<Get0ItemsItem> status, CancellationToken cancellationToken = default)
        {
            if (status == null)
            {
                throw new ArgumentNullException(nameof(status));
            }

            using var message = CreateFindPetsByStatusRequest(status);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Pet> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<Pet> array = new List<Pet>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Pet.DeserializePet(item));
                        }
                        value = array;
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 200:
                    {
                        IReadOnlyList<Pet> value = default;
                        var document = XDocument.Load(message.Response.ContentStream, LoadOptions.PreserveWhitespace);
                        if (document.Element("ArrayOfPet") is XElement arrayOfPetElement)
                        {
                            var array = new List<Pet>();
                            foreach (var e in arrayOfPetElement.Elements("Pet"))
                            {
                                array.Add(Pet.DeserializePet(e));
                            }
                            value = array;
                        }
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    return Response.FromValue<object>(null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateFindPetsByTagsRequest(IEnumerable<string> tags)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/pet/findByTags", false);
            uri.AppendQueryDelimited("tags", tags, ",", true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Muliple tags can be provided with comma separated strings. Use\ \ tag1, tag2, tag3 for testing. </summary>
        /// <param name="tags"> Tags to filter by. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public async Task<Response<object>> FindPetsByTagsAsync(IEnumerable<string> tags, CancellationToken cancellationToken = default)
        {
            if (tags == null)
            {
                throw new ArgumentNullException(nameof(tags));
            }

            using var message = CreateFindPetsByTagsRequest(tags);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Pet> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<Pet> array = new List<Pet>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Pet.DeserializePet(item));
                        }
                        value = array;
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 200:
                    {
                        IReadOnlyList<Pet> value = default;
                        var document = XDocument.Load(message.Response.ContentStream, LoadOptions.PreserveWhitespace);
                        if (document.Element("ArrayOfPet") is XElement arrayOfPetElement)
                        {
                            var array = new List<Pet>();
                            foreach (var e in arrayOfPetElement.Elements("Pet"))
                            {
                                array.Add(Pet.DeserializePet(e));
                            }
                            value = array;
                        }
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    return Response.FromValue<object>(null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Muliple tags can be provided with comma separated strings. Use\ \ tag1, tag2, tag3 for testing. </summary>
        /// <param name="tags"> Tags to filter by. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public Response<object> FindPetsByTags(IEnumerable<string> tags, CancellationToken cancellationToken = default)
        {
            if (tags == null)
            {
                throw new ArgumentNullException(nameof(tags));
            }

            using var message = CreateFindPetsByTagsRequest(tags);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Pet> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<Pet> array = new List<Pet>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Pet.DeserializePet(item));
                        }
                        value = array;
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 200:
                    {
                        IReadOnlyList<Pet> value = default;
                        var document = XDocument.Load(message.Response.ContentStream, LoadOptions.PreserveWhitespace);
                        if (document.Element("ArrayOfPet") is XElement arrayOfPetElement)
                        {
                            var array = new List<Pet>();
                            foreach (var e in arrayOfPetElement.Elements("Pet"))
                            {
                                array.Add(Pet.DeserializePet(e));
                            }
                            value = array;
                        }
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    return Response.FromValue<object>(null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPetByIdRequest(long petId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/pet/", false);
            uri.AppendPath(petId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Returns a single pet. </summary>
        /// <param name="petId"> ID of pet to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<Pet>> GetPetByIdAsync(long petId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPetByIdRequest(petId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Pet value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Pet.DeserializePet(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 404:
                    return Response.FromValue<Pet>(null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns a single pet. </summary>
        /// <param name="petId"> ID of pet to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Pet> GetPetById(long petId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPetByIdRequest(petId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Pet value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Pet.DeserializePet(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 404:
                    return Response.FromValue<Pet>(null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeletePetRequest(long petId, string apiKey)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/pet/", false);
            uri.AppendPath(petId, true);
            request.Uri = uri;
            if (apiKey != null)
            {
                request.Headers.Add("api_key", apiKey);
            }
            return message;
        }

        /// <summary> Deletes a pet. </summary>
        /// <param name="petId"> Pet id to delete. </param>
        /// <param name="apiKey"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> DeletePetAsync(long petId, string apiKey = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeletePetRequest(petId, apiKey);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes a pet. </summary>
        /// <param name="petId"> Pet id to delete. </param>
        /// <param name="apiKey"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response DeletePet(long petId, string apiKey = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeletePetRequest(petId, apiKey);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetInventoryRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/store/inventory", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Returns a map of status codes to quantities. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<IReadOnlyDictionary<string, int>>> GetInventoryAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetInventoryRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyDictionary<string, int> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        Dictionary<string, int> dictionary = new Dictionary<string, int>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetInt32());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns a map of status codes to quantities. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<IReadOnlyDictionary<string, int>> GetInventory(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetInventoryRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyDictionary<string, int> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        Dictionary<string, int> dictionary = new Dictionary<string, int>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetInt32());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePlaceOrderRequest(Order body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/store/order", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Place an order for a pet. </summary>
        /// <param name="body"> order placed for purchasing the pet. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<Order>> PlaceOrderAsync(Order body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreatePlaceOrderRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Order value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Order.DeserializeOrder(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                    return Response.FromValue<Order>(null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Place an order for a pet. </summary>
        /// <param name="body"> order placed for purchasing the pet. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<Order> PlaceOrder(Order body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreatePlaceOrderRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Order value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Order.DeserializeOrder(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                    return Response.FromValue<Order>(null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetOrderByIdRequest(long orderId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/store/order/", false);
            uri.AppendPath(orderId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> For valid response try integer IDs with value &gt;= 1 and &lt;= 10.\ \ Other values will generated exceptions. </summary>
        /// <param name="orderId"> ID of pet that needs to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<Order>> GetOrderByIdAsync(long orderId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetOrderByIdRequest(orderId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Order value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Order.DeserializeOrder(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 404:
                    return Response.FromValue<Order>(null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> For valid response try integer IDs with value &gt;= 1 and &lt;= 10.\ \ Other values will generated exceptions. </summary>
        /// <param name="orderId"> ID of pet that needs to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Order> GetOrderById(long orderId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetOrderByIdRequest(orderId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Order value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Order.DeserializeOrder(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 404:
                    return Response.FromValue<Order>(null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteOrderRequest(long orderId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/store/order/", false);
            uri.AppendPath(orderId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> For valid response try integer IDs with positive integer value.\ \ Negative or non-integer values will generate API errors. </summary>
        /// <param name="orderId"> ID of the order that needs to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> DeleteOrderAsync(long orderId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteOrderRequest(orderId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> For valid response try integer IDs with positive integer value.\ \ Negative or non-integer values will generate API errors. </summary>
        /// <param name="orderId"> ID of the order that needs to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response DeleteOrder(long orderId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteOrderRequest(orderId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateUserRequest(User body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/user", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> This can only be done by the logged in user. </summary>
        /// <param name="body"> Created user object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response> CreateUserAsync(User body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateUserRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> This can only be done by the logged in user. </summary>
        /// <param name="body"> Created user object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response CreateUser(User body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateUserRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateUsersWithArrayInputRequest(IEnumerable<User> body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/user/createWithArray", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in body)
            {
                content.JsonWriter.WriteObjectValue(item);
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        /// <summary> Creates list of users with given input array. </summary>
        /// <param name="body"> List of user object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response> CreateUsersWithArrayInputAsync(IEnumerable<User> body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateUsersWithArrayInputRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates list of users with given input array. </summary>
        /// <param name="body"> List of user object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response CreateUsersWithArrayInput(IEnumerable<User> body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateUsersWithArrayInputRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateUsersWithListInputRequest(IEnumerable<User> body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/user/createWithList", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in body)
            {
                content.JsonWriter.WriteObjectValue(item);
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        /// <summary> Creates list of users with given input array. </summary>
        /// <param name="body"> List of user object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response> CreateUsersWithListInputAsync(IEnumerable<User> body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateUsersWithListInputRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates list of users with given input array. </summary>
        /// <param name="body"> List of user object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response CreateUsersWithListInput(IEnumerable<User> body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateUsersWithListInputRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateLoginUserRequest(string username, string password)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/user/login", false);
            uri.AppendQuery("username", username, true);
            uri.AppendQuery("password", password, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Logs user into the system. </summary>
        /// <param name="username"> The user name for login. </param>
        /// <param name="password"> The password for login in clear text. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="username"/> or <paramref name="password"/> is null. </exception>
        public async Task<ResponseWithHeaders<string, ServiceLoginUserHeaders>> LoginUserAsync(string username, string password, CancellationToken cancellationToken = default)
        {
            if (username == null)
            {
                throw new ArgumentNullException(nameof(username));
            }
            if (password == null)
            {
                throw new ArgumentNullException(nameof(password));
            }

            using var message = CreateLoginUserRequest(username, password);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new ServiceLoginUserHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        string value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = document.RootElement.GetString();
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 400:
                    return ResponseWithHeaders.FromValue<string, ServiceLoginUserHeaders>(null, headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Logs user into the system. </summary>
        /// <param name="username"> The user name for login. </param>
        /// <param name="password"> The password for login in clear text. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="username"/> or <paramref name="password"/> is null. </exception>
        public ResponseWithHeaders<string, ServiceLoginUserHeaders> LoginUser(string username, string password, CancellationToken cancellationToken = default)
        {
            if (username == null)
            {
                throw new ArgumentNullException(nameof(username));
            }
            if (password == null)
            {
                throw new ArgumentNullException(nameof(password));
            }

            using var message = CreateLoginUserRequest(username, password);
            _pipeline.Send(message, cancellationToken);
            var headers = new ServiceLoginUserHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        string value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = document.RootElement.GetString();
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 400:
                    return ResponseWithHeaders.FromValue<string, ServiceLoginUserHeaders>(null, headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateLogoutUserRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/user/logout", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Logs out current logged in user session. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> LogoutUserAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateLogoutUserRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Logs out current logged in user session. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response LogoutUser(CancellationToken cancellationToken = default)
        {
            using var message = CreateLogoutUserRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetUserByNameRequest(string username)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/user/", false);
            uri.AppendPath(username, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Get user by user name. </summary>
        /// <param name="username"> The name that needs to be fetched. Use user1 for testing. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="username"/> is null. </exception>
        public async Task<Response<User>> GetUserByNameAsync(string username, CancellationToken cancellationToken = default)
        {
            if (username == null)
            {
                throw new ArgumentNullException(nameof(username));
            }

            using var message = CreateGetUserByNameRequest(username);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        User value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = User.DeserializeUser(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 404:
                    return Response.FromValue<User>(null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get user by user name. </summary>
        /// <param name="username"> The name that needs to be fetched. Use user1 for testing. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="username"/> is null. </exception>
        public Response<User> GetUserByName(string username, CancellationToken cancellationToken = default)
        {
            if (username == null)
            {
                throw new ArgumentNullException(nameof(username));
            }

            using var message = CreateGetUserByNameRequest(username);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        User value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = User.DeserializeUser(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 404:
                    return Response.FromValue<User>(null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateUserRequest(string username, User body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/user/", false);
            uri.AppendPath(username, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> This can only be done by the logged in user. </summary>
        /// <param name="username"> name that need to be updated. </param>
        /// <param name="body"> Updated user object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="username"/> or <paramref name="body"/> is null. </exception>
        public async Task<Response> UpdateUserAsync(string username, User body, CancellationToken cancellationToken = default)
        {
            if (username == null)
            {
                throw new ArgumentNullException(nameof(username));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateUserRequest(username, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> This can only be done by the logged in user. </summary>
        /// <param name="username"> name that need to be updated. </param>
        /// <param name="body"> Updated user object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="username"/> or <paramref name="body"/> is null. </exception>
        public Response UpdateUser(string username, User body, CancellationToken cancellationToken = default)
        {
            if (username == null)
            {
                throw new ArgumentNullException(nameof(username));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateUserRequest(username, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteUserRequest(string username)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/user/", false);
            uri.AppendPath(username, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> This can only be done by the logged in user. </summary>
        /// <param name="username"> The name that needs to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="username"/> is null. </exception>
        public async Task<Response> DeleteUserAsync(string username, CancellationToken cancellationToken = default)
        {
            if (username == null)
            {
                throw new ArgumentNullException(nameof(username));
            }

            using var message = CreateDeleteUserRequest(username);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> This can only be done by the logged in user. </summary>
        /// <param name="username"> The name that needs to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="username"/> is null. </exception>
        public Response DeleteUser(string username, CancellationToken cancellationToken = default)
        {
            if (username == null)
            {
                throw new ArgumentNullException(nameof(username));
            }

            using var message = CreateDeleteUserRequest(username);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
