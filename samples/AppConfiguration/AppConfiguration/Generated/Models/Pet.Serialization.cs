// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace AppConfiguration.Models
{
    public partial class Pet : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id");
                writer.WriteNumberValue(Id.Value);
            }
            if (Optional.IsDefined(Category))
            {
                writer.WritePropertyName("category");
                writer.WriteObjectValue(Category);
            }
            writer.WritePropertyName("name");
            writer.WriteStringValue(Name);
            writer.WritePropertyName("photoUrls");
            writer.WriteStartArray();
            foreach (var item in PhotoUrls)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags");
                writer.WriteStartArray();
                foreach (var item in Tags)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status");
                writer.WriteStringValue(Status.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static Pet DeserializePet(JsonElement element)
        {
            Optional<long> id = default;
            Optional<Category> category = default;
            string name = default;
            IList<string> photoUrls = default;
            Optional<IList<Tag>> tags = default;
            Optional<PetStatus> status = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("category"))
                {
                    category = Category.DeserializeCategory(property.Value);
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("photoUrls"))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    photoUrls = array;
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    List<Tag> array = new List<Tag>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Tag.DeserializeTag(item));
                    }
                    tags = array;
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    status = new PetStatus(property.Value.GetString());
                    continue;
                }
            }
            return new Pet(Optional.ToNullable(id), category.Value, name, photoUrls, Optional.ToList(tags), Optional.ToNullable(status));
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "Pet");
            if (Optional.IsDefined(Id))
            {
                writer.WriteStartElement("id");
                writer.WriteValue(Id.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Category))
            {
                writer.WriteObjectValue(Category, "Category");
            }
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            if (Optional.IsDefined(Status))
            {
                writer.WriteStartElement("status");
                writer.WriteValue(Status.Value.ToString());
                writer.WriteEndElement();
            }
            writer.WriteStartElement("photoUrl");
            foreach (var item in PhotoUrls)
            {
                writer.WriteStartElement("PetPhotoUrlsItem");
                writer.WriteValue(item);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WriteStartElement("tag");
                foreach (var item in Tags)
                {
                    writer.WriteObjectValue(item, "Tag");
                }
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static Pet DeserializePet(XElement element)
        {
            long? id = default;
            Category category = default;
            string name = default;
            PetStatus? status = default;
            IList<string> photoUrls = default;
            IList<Tag> tags = default;
            if (element.Element("id") is XElement idElement)
            {
                id = (long?)idElement;
            }
            if (element.Element("Category") is XElement categoryElement)
            {
                category = Category.DeserializeCategory(categoryElement);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("status") is XElement statusElement)
            {
                status = new PetStatus(statusElement.Value);
            }
            if (element.Element("photoUrl") is XElement photoUrlElement)
            {
                var array = new List<string>();
                foreach (var e in photoUrlElement.Elements("PetPhotoUrlsItem"))
                {
                    array.Add((string)e);
                }
                photoUrls = array;
            }
            if (element.Element("tag") is XElement tagElement)
            {
                var array = new List<Tag>();
                foreach (var e in tagElement.Elements("Tag"))
                {
                    array.Add(Tag.DeserializeTag(e));
                }
                tags = array;
            }
            return new Pet(id, category, name, photoUrls, tags, status);
        }
    }
}
