// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace AppConfiguration.Models
{
    public partial class Order : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id");
                writer.WriteNumberValue(Id.Value);
            }
            if (Optional.IsDefined(PetId))
            {
                writer.WritePropertyName("petId");
                writer.WriteNumberValue(PetId.Value);
            }
            if (Optional.IsDefined(Quantity))
            {
                writer.WritePropertyName("quantity");
                writer.WriteNumberValue(Quantity.Value);
            }
            if (Optional.IsDefined(ShipDate))
            {
                writer.WritePropertyName("shipDate");
                writer.WriteStringValue(ShipDate.Value, "O");
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status");
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (Optional.IsDefined(Complete))
            {
                writer.WritePropertyName("complete");
                writer.WriteBooleanValue(Complete.Value);
            }
            writer.WriteEndObject();
        }

        internal static Order DeserializeOrder(JsonElement element)
        {
            Optional<long> id = default;
            Optional<long> petId = default;
            Optional<int> quantity = default;
            Optional<DateTimeOffset> shipDate = default;
            Optional<OrderStatus> status = default;
            Optional<bool> complete = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("petId"))
                {
                    petId = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("quantity"))
                {
                    quantity = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("shipDate"))
                {
                    shipDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    status = new OrderStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("complete"))
                {
                    complete = property.Value.GetBoolean();
                    continue;
                }
            }
            return new Order(Optional.ToNullable(id), Optional.ToNullable(petId), Optional.ToNullable(quantity), Optional.ToNullable(shipDate), Optional.ToNullable(status), Optional.ToNullable(complete));
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "Order");
            if (Optional.IsDefined(Id))
            {
                writer.WriteStartElement("id");
                writer.WriteValue(Id.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(PetId))
            {
                writer.WriteStartElement("petId");
                writer.WriteValue(PetId.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Quantity))
            {
                writer.WriteStartElement("quantity");
                writer.WriteValue(Quantity.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ShipDate))
            {
                writer.WriteStartElement("shipDate");
                writer.WriteValue(ShipDate.Value, "O");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Status))
            {
                writer.WriteStartElement("status");
                writer.WriteValue(Status.Value.ToString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Complete))
            {
                writer.WriteStartElement("complete");
                writer.WriteValue(Complete.Value);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static Order DeserializeOrder(XElement element)
        {
            long? id = default;
            long? petId = default;
            int? quantity = default;
            DateTimeOffset? shipDate = default;
            OrderStatus? status = default;
            bool? complete = default;
            if (element.Element("id") is XElement idElement)
            {
                id = (long?)idElement;
            }
            if (element.Element("petId") is XElement petIdElement)
            {
                petId = (long?)petIdElement;
            }
            if (element.Element("quantity") is XElement quantityElement)
            {
                quantity = (int?)quantityElement;
            }
            if (element.Element("shipDate") is XElement shipDateElement)
            {
                shipDate = shipDateElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("status") is XElement statusElement)
            {
                status = new OrderStatus(statusElement.Value);
            }
            if (element.Element("complete") is XElement completeElement)
            {
                complete = (bool?)completeElement;
            }
            return new Order(id, petId, quantity, shipDate, status, complete);
        }
    }
}
