// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace AppConfiguration.Models
{
    public partial class User : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id");
                writer.WriteNumberValue(Id.Value);
            }
            if (Optional.IsDefined(Username))
            {
                writer.WritePropertyName("username");
                writer.WriteStringValue(Username);
            }
            if (Optional.IsDefined(FirstName))
            {
                writer.WritePropertyName("firstName");
                writer.WriteStringValue(FirstName);
            }
            if (Optional.IsDefined(LastName))
            {
                writer.WritePropertyName("lastName");
                writer.WriteStringValue(LastName);
            }
            if (Optional.IsDefined(Email))
            {
                writer.WritePropertyName("email");
                writer.WriteStringValue(Email);
            }
            if (Optional.IsDefined(Password))
            {
                writer.WritePropertyName("password");
                writer.WriteStringValue(Password);
            }
            if (Optional.IsDefined(Phone))
            {
                writer.WritePropertyName("phone");
                writer.WriteStringValue(Phone);
            }
            if (Optional.IsDefined(UserStatus))
            {
                writer.WritePropertyName("userStatus");
                writer.WriteNumberValue(UserStatus.Value);
            }
            writer.WriteEndObject();
        }

        internal static User DeserializeUser(JsonElement element)
        {
            Optional<long> id = default;
            Optional<string> username = default;
            Optional<string> firstName = default;
            Optional<string> lastName = default;
            Optional<string> email = default;
            Optional<string> password = default;
            Optional<string> phone = default;
            Optional<int> userStatus = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("username"))
                {
                    username = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("firstName"))
                {
                    firstName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastName"))
                {
                    lastName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("email"))
                {
                    email = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("password"))
                {
                    password = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("phone"))
                {
                    phone = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("userStatus"))
                {
                    userStatus = property.Value.GetInt32();
                    continue;
                }
            }
            return new User(Optional.ToNullable(id), username.Value, firstName.Value, lastName.Value, email.Value, password.Value, phone.Value, Optional.ToNullable(userStatus));
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "User");
            if (Optional.IsDefined(Id))
            {
                writer.WriteStartElement("id");
                writer.WriteValue(Id.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Username))
            {
                writer.WriteStartElement("username");
                writer.WriteValue(Username);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(FirstName))
            {
                writer.WriteStartElement("firstName");
                writer.WriteValue(FirstName);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(LastName))
            {
                writer.WriteStartElement("lastName");
                writer.WriteValue(LastName);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Email))
            {
                writer.WriteStartElement("email");
                writer.WriteValue(Email);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Password))
            {
                writer.WriteStartElement("password");
                writer.WriteValue(Password);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Phone))
            {
                writer.WriteStartElement("phone");
                writer.WriteValue(Phone);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(UserStatus))
            {
                writer.WriteStartElement("userStatus");
                writer.WriteValue(UserStatus.Value);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static User DeserializeUser(XElement element)
        {
            long? id = default;
            string username = default;
            string firstName = default;
            string lastName = default;
            string email = default;
            string password = default;
            string phone = default;
            int? userStatus = default;
            if (element.Element("id") is XElement idElement)
            {
                id = (long?)idElement;
            }
            if (element.Element("username") is XElement usernameElement)
            {
                username = (string)usernameElement;
            }
            if (element.Element("firstName") is XElement firstNameElement)
            {
                firstName = (string)firstNameElement;
            }
            if (element.Element("lastName") is XElement lastNameElement)
            {
                lastName = (string)lastNameElement;
            }
            if (element.Element("email") is XElement emailElement)
            {
                email = (string)emailElement;
            }
            if (element.Element("password") is XElement passwordElement)
            {
                password = (string)passwordElement;
            }
            if (element.Element("phone") is XElement phoneElement)
            {
                phone = (string)phoneElement;
            }
            if (element.Element("userStatus") is XElement userStatusElement)
            {
                userStatus = (int?)userStatusElement;
            }
            return new User(id, username, firstName, lastName, email, password, phone, userStatus);
        }
    }
}
