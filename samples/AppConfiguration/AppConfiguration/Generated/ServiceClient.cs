// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using AppConfiguration.Models;
using Azure;
using Azure.Core.Pipeline;

namespace AppConfiguration
{
    /// <summary> The Service service client. </summary>
    public partial class ServiceClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal ServiceRestClient RestClient { get; }
        /// <summary> Initializes a new instance of ServiceClient for mocking. </summary>
        protected ServiceClient()
        {
        }
        /// <summary> Initializes a new instance of ServiceClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal ServiceClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new ServiceRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Add a new pet to the store. </summary>
        /// <param name="body"> Pet object that needs to be added to the store. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddPetAsync(Pet body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.AddPet");
            scope.Start();
            try
            {
                return await RestClient.AddPetAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a new pet to the store. </summary>
        /// <param name="body"> Pet object that needs to be added to the store. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddPet(Pet body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.AddPet");
            scope.Start();
            try
            {
                return RestClient.AddPet(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an existing pet. </summary>
        /// <param name="body"> Pet object that needs to be added to the store. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdatePetAsync(Pet body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.UpdatePet");
            scope.Start();
            try
            {
                return await RestClient.UpdatePetAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an existing pet. </summary>
        /// <param name="body"> Pet object that needs to be added to the store. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdatePet(Pet body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.UpdatePet");
            scope.Start();
            try
            {
                return RestClient.UpdatePet(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Multiple status values can be provided with comma separated strings. </summary>
        /// <param name="status"> Status values that need to be considered for filter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> FindPetsByStatusAsync(IEnumerable<Get0ItemsItem> status, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.FindPetsByStatus");
            scope.Start();
            try
            {
                return await RestClient.FindPetsByStatusAsync(status, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Multiple status values can be provided with comma separated strings. </summary>
        /// <param name="status"> Status values that need to be considered for filter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> FindPetsByStatus(IEnumerable<Get0ItemsItem> status, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.FindPetsByStatus");
            scope.Start();
            try
            {
                return RestClient.FindPetsByStatus(status, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Muliple tags can be provided with comma separated strings. Use\ \ tag1, tag2, tag3 for testing. </summary>
        /// <param name="tags"> Tags to filter by. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> FindPetsByTagsAsync(IEnumerable<string> tags, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.FindPetsByTags");
            scope.Start();
            try
            {
                return await RestClient.FindPetsByTagsAsync(tags, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Muliple tags can be provided with comma separated strings. Use\ \ tag1, tag2, tag3 for testing. </summary>
        /// <param name="tags"> Tags to filter by. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> FindPetsByTags(IEnumerable<string> tags, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.FindPetsByTags");
            scope.Start();
            try
            {
                return RestClient.FindPetsByTags(tags, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a single pet. </summary>
        /// <param name="petId"> ID of pet to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Pet>> GetPetByIdAsync(long petId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetPetById");
            scope.Start();
            try
            {
                return await RestClient.GetPetByIdAsync(petId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a single pet. </summary>
        /// <param name="petId"> ID of pet to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Pet> GetPetById(long petId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetPetById");
            scope.Start();
            try
            {
                return RestClient.GetPetById(petId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a pet. </summary>
        /// <param name="petId"> Pet id to delete. </param>
        /// <param name="apiKey"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeletePetAsync(long petId, string apiKey = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DeletePet");
            scope.Start();
            try
            {
                return await RestClient.DeletePetAsync(petId, apiKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a pet. </summary>
        /// <param name="petId"> Pet id to delete. </param>
        /// <param name="apiKey"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeletePet(long petId, string apiKey = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DeletePet");
            scope.Start();
            try
            {
                return RestClient.DeletePet(petId, apiKey, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a map of status codes to quantities. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyDictionary<string, int>>> GetInventoryAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetInventory");
            scope.Start();
            try
            {
                return await RestClient.GetInventoryAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a map of status codes to quantities. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyDictionary<string, int>> GetInventory(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetInventory");
            scope.Start();
            try
            {
                return RestClient.GetInventory(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Place an order for a pet. </summary>
        /// <param name="body"> order placed for purchasing the pet. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Order>> PlaceOrderAsync(Order body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.PlaceOrder");
            scope.Start();
            try
            {
                return await RestClient.PlaceOrderAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Place an order for a pet. </summary>
        /// <param name="body"> order placed for purchasing the pet. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Order> PlaceOrder(Order body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.PlaceOrder");
            scope.Start();
            try
            {
                return RestClient.PlaceOrder(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> For valid response try integer IDs with value &gt;= 1 and &lt;= 10.\ \ Other values will generated exceptions. </summary>
        /// <param name="orderId"> ID of pet that needs to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Order>> GetOrderByIdAsync(long orderId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetOrderById");
            scope.Start();
            try
            {
                return await RestClient.GetOrderByIdAsync(orderId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> For valid response try integer IDs with value &gt;= 1 and &lt;= 10.\ \ Other values will generated exceptions. </summary>
        /// <param name="orderId"> ID of pet that needs to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Order> GetOrderById(long orderId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetOrderById");
            scope.Start();
            try
            {
                return RestClient.GetOrderById(orderId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> For valid response try integer IDs with positive integer value.\ \ Negative or non-integer values will generate API errors. </summary>
        /// <param name="orderId"> ID of the order that needs to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteOrderAsync(long orderId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DeleteOrder");
            scope.Start();
            try
            {
                return await RestClient.DeleteOrderAsync(orderId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> For valid response try integer IDs with positive integer value.\ \ Negative or non-integer values will generate API errors. </summary>
        /// <param name="orderId"> ID of the order that needs to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteOrder(long orderId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DeleteOrder");
            scope.Start();
            try
            {
                return RestClient.DeleteOrder(orderId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This can only be done by the logged in user. </summary>
        /// <param name="body"> Created user object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateUserAsync(User body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.CreateUser");
            scope.Start();
            try
            {
                return await RestClient.CreateUserAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This can only be done by the logged in user. </summary>
        /// <param name="body"> Created user object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateUser(User body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.CreateUser");
            scope.Start();
            try
            {
                return RestClient.CreateUser(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates list of users with given input array. </summary>
        /// <param name="body"> List of user object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateUsersWithArrayInputAsync(IEnumerable<User> body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.CreateUsersWithArrayInput");
            scope.Start();
            try
            {
                return await RestClient.CreateUsersWithArrayInputAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates list of users with given input array. </summary>
        /// <param name="body"> List of user object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateUsersWithArrayInput(IEnumerable<User> body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.CreateUsersWithArrayInput");
            scope.Start();
            try
            {
                return RestClient.CreateUsersWithArrayInput(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates list of users with given input array. </summary>
        /// <param name="body"> List of user object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateUsersWithListInputAsync(IEnumerable<User> body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.CreateUsersWithListInput");
            scope.Start();
            try
            {
                return await RestClient.CreateUsersWithListInputAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates list of users with given input array. </summary>
        /// <param name="body"> List of user object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateUsersWithListInput(IEnumerable<User> body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.CreateUsersWithListInput");
            scope.Start();
            try
            {
                return RestClient.CreateUsersWithListInput(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Logs user into the system. </summary>
        /// <param name="username"> The user name for login. </param>
        /// <param name="password"> The password for login in clear text. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<string>> LoginUserAsync(string username, string password, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.LoginUser");
            scope.Start();
            try
            {
                return await RestClient.LoginUserAsync(username, password, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Logs user into the system. </summary>
        /// <param name="username"> The user name for login. </param>
        /// <param name="password"> The password for login in clear text. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<string> LoginUser(string username, string password, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.LoginUser");
            scope.Start();
            try
            {
                return RestClient.LoginUser(username, password, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Logs out current logged in user session. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> LogoutUserAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.LogoutUser");
            scope.Start();
            try
            {
                return await RestClient.LogoutUserAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Logs out current logged in user session. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response LogoutUser(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.LogoutUser");
            scope.Start();
            try
            {
                return RestClient.LogoutUser(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get user by user name. </summary>
        /// <param name="username"> The name that needs to be fetched. Use user1 for testing. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<User>> GetUserByNameAsync(string username, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetUserByName");
            scope.Start();
            try
            {
                return await RestClient.GetUserByNameAsync(username, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get user by user name. </summary>
        /// <param name="username"> The name that needs to be fetched. Use user1 for testing. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<User> GetUserByName(string username, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetUserByName");
            scope.Start();
            try
            {
                return RestClient.GetUserByName(username, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This can only be done by the logged in user. </summary>
        /// <param name="username"> name that need to be updated. </param>
        /// <param name="body"> Updated user object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateUserAsync(string username, User body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.UpdateUser");
            scope.Start();
            try
            {
                return await RestClient.UpdateUserAsync(username, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This can only be done by the logged in user. </summary>
        /// <param name="username"> name that need to be updated. </param>
        /// <param name="body"> Updated user object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateUser(string username, User body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.UpdateUser");
            scope.Start();
            try
            {
                return RestClient.UpdateUser(username, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This can only be done by the logged in user. </summary>
        /// <param name="username"> The name that needs to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteUserAsync(string username, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DeleteUser");
            scope.Start();
            try
            {
                return await RestClient.DeleteUserAsync(username, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This can only be done by the logged in user. </summary>
        /// <param name="username"> The name that needs to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteUser(string username, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DeleteUser");
            scope.Start();
            try
            {
                return RestClient.DeleteUser(username, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
